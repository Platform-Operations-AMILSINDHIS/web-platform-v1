"""Represents a binary file in a space. An asset can be any file type."""
type Asset {
  contentType(locale: String): String
  contentfulMetadata: ContentfulMetadata!
  description(locale: String): String
  fileName(locale: String): String
  height(locale: String): Int
  linkedFrom(allowedLocales: [String]): AssetLinkingCollections
  size(locale: String): Int
  sys: Sys!
  title(locale: String): String
  url(locale: String, transform: ImageTransformOptions): String
  width(locale: String): Int
}

type AssetCollection {
  items: [Asset]!
  limit: Int!
  skip: Int!
  total: Int!
}

input AssetFilter {
  AND: [AssetFilter]
  OR: [AssetFilter]
  contentType: String
  contentType_contains: String
  contentType_exists: Boolean
  contentType_in: [String]
  contentType_not: String
  contentType_not_contains: String
  contentType_not_in: [String]
  contentfulMetadata: ContentfulMetadataFilter
  description: String
  description_contains: String
  description_exists: Boolean
  description_in: [String]
  description_not: String
  description_not_contains: String
  description_not_in: [String]
  fileName: String
  fileName_contains: String
  fileName_exists: Boolean
  fileName_in: [String]
  fileName_not: String
  fileName_not_contains: String
  fileName_not_in: [String]
  height: Int
  height_exists: Boolean
  height_gt: Int
  height_gte: Int
  height_in: [Int]
  height_lt: Int
  height_lte: Int
  height_not: Int
  height_not_in: [Int]
  size: Int
  size_exists: Boolean
  size_gt: Int
  size_gte: Int
  size_in: [Int]
  size_lt: Int
  size_lte: Int
  size_not: Int
  size_not_in: [Int]
  sys: SysFilter
  title: String
  title_contains: String
  title_exists: Boolean
  title_in: [String]
  title_not: String
  title_not_contains: String
  title_not_in: [String]
  url: String
  url_contains: String
  url_exists: Boolean
  url_in: [String]
  url_not: String
  url_not_contains: String
  url_not_in: [String]
  width: Int
  width_exists: Boolean
  width_gt: Int
  width_gte: Int
  width_in: [Int]
  width_lt: Int
  width_lte: Int
  width_not: Int
  width_not_in: [Int]
}

type AssetLinkingCollections {
  blogContentTypeCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): BlogContentTypeCollection
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  eventContentTypeCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EventContentTypeCollection
  eventImageSliderCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EventImageSliderCollection
  membersOfTheManagingCommitteeKapCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): MembersOfTheManagingCommitteeKapCollection
  officeBearersCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): OfficeBearersCollection
  pastEventContentTypeCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): PastEventContentTypeCollection
}

enum AssetOrder {
  contentType_ASC
  contentType_DESC
  fileName_ASC
  fileName_DESC
  height_ASC
  height_DESC
  size_ASC
  size_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  url_ASC
  url_DESC
  width_ASC
  width_DESC
}

"""
This content type represents the content that will go on your blog page, select the type weather if it's samachar, publication or a regular blog [See type definition](https://app.contentful.com/spaces/f0p9zov000x1/content_types/blogContentType)
"""
type BlogContentType implements Entry {
  author(locale: String): String
  blogContent(locale: String): BlogContentTypeBlogContent
  blogDisplayPicture(locale: String, preview: Boolean): Asset
  blogSlug(locale: String): String
  blogTags(locale: String): [String]
  blogTitle(locale: String): String
  blogType(locale: String): [String]
  contentfulMetadata: ContentfulMetadata!
  dateOfBlog(locale: String): DateTime
  excerpt(locale: String): String
  linkedFrom(allowedLocales: [String]): BlogContentTypeLinkingCollections
  sys: Sys!
}

type BlogContentTypeBlogContent {
  json: JSON!
  links: BlogContentTypeBlogContentLinks!
}

type BlogContentTypeBlogContentAssets {
  block: [Asset]!
  hyperlink: [Asset]!
}

type BlogContentTypeBlogContentEntries {
  block: [Entry]!
  hyperlink: [Entry]!
  inline: [Entry]!
}

type BlogContentTypeBlogContentLinks {
  assets: BlogContentTypeBlogContentAssets!
  entries: BlogContentTypeBlogContentEntries!
  resources: BlogContentTypeBlogContentResources!
}

type BlogContentTypeBlogContentResources {
  block: [ResourceLink!]!
  hyperlink: [ResourceLink!]!
  inline: [ResourceLink!]!
}

type BlogContentTypeCollection {
  items: [BlogContentType]!
  limit: Int!
  skip: Int!
  total: Int!
}

input BlogContentTypeFilter {
  AND: [BlogContentTypeFilter]
  OR: [BlogContentTypeFilter]
  author: String
  author_contains: String
  author_exists: Boolean
  author_in: [String]
  author_not: String
  author_not_contains: String
  author_not_in: [String]
  blogContent_contains: String
  blogContent_exists: Boolean
  blogContent_not_contains: String
  blogDisplayPicture_exists: Boolean
  blogSlug: String
  blogSlug_contains: String
  blogSlug_exists: Boolean
  blogSlug_in: [String]
  blogSlug_not: String
  blogSlug_not_contains: String
  blogSlug_not_in: [String]
  blogTags_contains_all: [String]
  blogTags_contains_none: [String]
  blogTags_contains_some: [String]
  blogTags_exists: Boolean
  blogTitle: String
  blogTitle_contains: String
  blogTitle_exists: Boolean
  blogTitle_in: [String]
  blogTitle_not: String
  blogTitle_not_contains: String
  blogTitle_not_in: [String]
  blogType_contains_all: [String]
  blogType_contains_none: [String]
  blogType_contains_some: [String]
  blogType_exists: Boolean
  contentfulMetadata: ContentfulMetadataFilter
  dateOfBlog: DateTime
  dateOfBlog_exists: Boolean
  dateOfBlog_gt: DateTime
  dateOfBlog_gte: DateTime
  dateOfBlog_in: [DateTime]
  dateOfBlog_lt: DateTime
  dateOfBlog_lte: DateTime
  dateOfBlog_not: DateTime
  dateOfBlog_not_in: [DateTime]
  excerpt: String
  excerpt_contains: String
  excerpt_exists: Boolean
  excerpt_in: [String]
  excerpt_not: String
  excerpt_not_contains: String
  excerpt_not_in: [String]
  sys: SysFilter
}

type BlogContentTypeLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum BlogContentTypeOrder {
  author_ASC
  author_DESC
  blogSlug_ASC
  blogSlug_DESC
  blogTitle_ASC
  blogTitle_DESC
  dateOfBlog_ASC
  dateOfBlog_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type ContentfulMetadata {
  tags: [ContentfulTag]!
}

input ContentfulMetadataFilter {
  tags: ContentfulMetadataTagsFilter
  tags_exists: Boolean
}

input ContentfulMetadataTagsFilter {
  id_contains_all: [String]
  id_contains_none: [String]
  id_contains_some: [String]
}

"""
Represents a tag entity for finding and organizing content easily.
    Find out more here: https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/content-tags
"""
type ContentfulTag {
  id: String
  name: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z,
    compliant with the 'date-time' format outlined in section 5.6 of
    the RFC 3339 profile of the ISO 8601 standard for representation
    of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The 'Dimension' type represents dimensions as whole numeric values between `1` and `4000`.
"""
scalar Dimension

interface Entry {
  contentfulMetadata: ContentfulMetadata!
  sys: Sys!
}

type EntryCollection {
  items: [Entry]!
  limit: Int!
  skip: Int!
  total: Int!
}

input EntryFilter {
  AND: [EntryFilter]
  OR: [EntryFilter]
  contentfulMetadata: ContentfulMetadataFilter
  sys: SysFilter
}

enum EntryOrder {
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
A content type for you to add your events, and the respective event data such as : Event location, event name, event venue and so on [See type definition](https://app.contentful.com/spaces/f0p9zov000x1/content_types/eventContentType)
"""
type EventContentType implements Entry {
  contentfulMetadata: ContentfulMetadata!
  eventDates(locale: String): DateTime
  eventDescription(locale: String): EventContentTypeEventDescription
  eventDisplayImage(locale: String, preview: Boolean): Asset
  eventLocation(locale: String): String
  eventSearchTags(locale: String): [String]
  eventSlug(locale: String): String
  eventTitle(locale: String): String
  eventType(locale: String): [String]
  linkedFrom(allowedLocales: [String]): EventContentTypeLinkingCollections
  sys: Sys!
}

type EventContentTypeCollection {
  items: [EventContentType]!
  limit: Int!
  skip: Int!
  total: Int!
}

type EventContentTypeEventDescription {
  json: JSON!
  links: EventContentTypeEventDescriptionLinks!
}

type EventContentTypeEventDescriptionAssets {
  block: [Asset]!
  hyperlink: [Asset]!
}

type EventContentTypeEventDescriptionEntries {
  block: [Entry]!
  hyperlink: [Entry]!
  inline: [Entry]!
}

type EventContentTypeEventDescriptionLinks {
  assets: EventContentTypeEventDescriptionAssets!
  entries: EventContentTypeEventDescriptionEntries!
  resources: EventContentTypeEventDescriptionResources!
}

type EventContentTypeEventDescriptionResources {
  block: [ResourceLink!]!
  hyperlink: [ResourceLink!]!
  inline: [ResourceLink!]!
}

input EventContentTypeFilter {
  AND: [EventContentTypeFilter]
  OR: [EventContentTypeFilter]
  contentfulMetadata: ContentfulMetadataFilter
  eventDates: DateTime
  eventDates_exists: Boolean
  eventDates_gt: DateTime
  eventDates_gte: DateTime
  eventDates_in: [DateTime]
  eventDates_lt: DateTime
  eventDates_lte: DateTime
  eventDates_not: DateTime
  eventDates_not_in: [DateTime]
  eventDescription_contains: String
  eventDescription_exists: Boolean
  eventDescription_not_contains: String
  eventDisplayImage_exists: Boolean
  eventLocation: String
  eventLocation_contains: String
  eventLocation_exists: Boolean
  eventLocation_in: [String]
  eventLocation_not: String
  eventLocation_not_contains: String
  eventLocation_not_in: [String]
  eventSearchTags_contains_all: [String]
  eventSearchTags_contains_none: [String]
  eventSearchTags_contains_some: [String]
  eventSearchTags_exists: Boolean
  eventSlug: String
  eventSlug_contains: String
  eventSlug_exists: Boolean
  eventSlug_in: [String]
  eventSlug_not: String
  eventSlug_not_contains: String
  eventSlug_not_in: [String]
  eventTitle: String
  eventTitle_contains: String
  eventTitle_exists: Boolean
  eventTitle_in: [String]
  eventTitle_not: String
  eventTitle_not_contains: String
  eventTitle_not_in: [String]
  eventType_contains_all: [String]
  eventType_contains_none: [String]
  eventType_contains_some: [String]
  eventType_exists: Boolean
  sys: SysFilter
}

type EventContentTypeLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum EventContentTypeOrder {
  eventDates_ASC
  eventDates_DESC
  eventLocation_ASC
  eventLocation_DESC
  eventSlug_ASC
  eventSlug_DESC
  eventTitle_ASC
  eventTitle_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
bunch of images you can add for changing of backdrop images [See type definition](https://app.contentful.com/spaces/f0p9zov000x1/content_types/eventImageSlider)
"""
type EventImageSlider implements Entry {
  contentfulMetadata: ContentfulMetadata!
  imagesCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): AssetCollection
  linkedFrom(allowedLocales: [String]): EventImageSliderLinkingCollections
  sys: Sys!
}

type EventImageSliderCollection {
  items: [EventImageSlider]!
  limit: Int!
  skip: Int!
  total: Int!
}

input EventImageSliderFilter {
  AND: [EventImageSliderFilter]
  OR: [EventImageSliderFilter]
  contentfulMetadata: ContentfulMetadataFilter
  imagesCollection_exists: Boolean
  sys: SysFilter
}

type EventImageSliderLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum EventImageSliderOrder {
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""The 'HexColor' type represents color in `rgb:ffffff` string format."""
scalar HexColor

enum ImageFormat {
  AVIF

  """JPG image format."""
  JPG

  """
  Progressive JPG format stores multiple passes of an image in progressively higher detail.
          When a progressive image is loading, the viewer will first see a lower quality pixelated version which
          will gradually improve in detail, until the image is fully downloaded. This is to display an image as
          early as possible to make the layout look as designed.
  """
  JPG_PROGRESSIVE

  """PNG image format"""
  PNG

  """
  8-bit PNG images support up to 256 colors and weigh less than the standard 24-bit PNG equivalent.
          The 8-bit PNG format is mostly used for simple images, such as icons or logos.
  """
  PNG8

  """WebP image format."""
  WEBP
}

enum ImageResizeFocus {
  """Focus the resizing on the bottom."""
  BOTTOM

  """Focus the resizing on the bottom left."""
  BOTTOM_LEFT

  """Focus the resizing on the bottom right."""
  BOTTOM_RIGHT

  """Focus the resizing on the center."""
  CENTER

  """Focus the resizing on the largest face."""
  FACE

  """Focus the resizing on the area containing all the faces."""
  FACES

  """Focus the resizing on the left."""
  LEFT

  """Focus the resizing on the right."""
  RIGHT

  """Focus the resizing on the top."""
  TOP

  """Focus the resizing on the top left."""
  TOP_LEFT

  """Focus the resizing on the top right."""
  TOP_RIGHT
}

enum ImageResizeStrategy {
  """
  Crops a part of the original image to fit into the specified dimensions.
  """
  CROP

  """
  Resizes the image to the specified dimensions, cropping the image if needed.
  """
  FILL

  """Resizes the image to fit into the specified dimensions."""
  FIT

  """
  Resizes the image to the specified dimensions, padding the image if needed.
          Uses desired background color as padding color.
  """
  PAD

  """
  Resizes the image to the specified dimensions, changing the original aspect ratio if needed.
  """
  SCALE

  """Creates a thumbnail from the image."""
  THUMB
}

input ImageTransformOptions {
  """
  Desired background color, used with corner radius or `PAD` resize strategy.
          Defaults to transparent (for `PNG`, `PNG8` and `WEBP`) or white (for `JPG` and `JPG_PROGRESSIVE`).
  """
  backgroundColor: HexColor

  """
  Desired corner radius in pixels.
          Results in an image with rounded corners (pass `-1` for a full circle/ellipse).
          Defaults to `0`. Uses desired background color as padding color,
          unless the format is `JPG` or `JPG_PROGRESSIVE` and resize strategy is `PAD`, then defaults to white.
  """
  cornerRadius: Int

  """Desired image format. Defaults to the original image format."""
  format: ImageFormat

  """Desired height in pixels. Defaults to the original image height."""
  height: Dimension

  """
  Desired quality of the image in percents.
          Used for `PNG8`, `JPG`, `JPG_PROGRESSIVE` and `WEBP` formats.
  """
  quality: Quality

  """Desired resize focus area. Defaults to `CENTER`."""
  resizeFocus: ImageResizeFocus

  """Desired resize strategy. Defaults to `FIT`."""
  resizeStrategy: ImageResizeStrategy

  """Desired width in pixels. Defaults to the original image width."""
  width: Dimension
}

"""
words by InduShani [See type definition](https://app.contentful.com/spaces/f0p9zov000x1/content_types/induShaniWords)
"""
type InduShaniWords implements Entry {
  contentfulMetadata: ContentfulMetadata!
  herWords(locale: String): String
  linkedFrom(allowedLocales: [String]): InduShaniWordsLinkingCollections
  sys: Sys!
}

type InduShaniWordsCollection {
  items: [InduShaniWords]!
  limit: Int!
  skip: Int!
  total: Int!
}

input InduShaniWordsFilter {
  AND: [InduShaniWordsFilter]
  OR: [InduShaniWordsFilter]
  contentfulMetadata: ContentfulMetadataFilter
  herWords: String
  herWords_contains: String
  herWords_exists: Boolean
  herWords_in: [String]
  herWords_not: String
  herWords_not_contains: String
  herWords_not_in: [String]
  sys: SysFilter
}

type InduShaniWordsLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum InduShaniWordsOrder {
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
Managing community member details [See type definition](https://app.contentful.com/spaces/f0p9zov000x1/content_types/membersOfTheManagingCommitteeKap)
"""
type MembersOfTheManagingCommitteeKap implements Entry {
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): MembersOfTheManagingCommitteeKapLinkingCollections
  mkapDisplayPicture(locale: String, preview: Boolean): Asset
  mkapName(locale: String): String
  mkapPosition(locale: String): String
  sys: Sys!
}

type MembersOfTheManagingCommitteeKapCollection {
  items: [MembersOfTheManagingCommitteeKap]!
  limit: Int!
  skip: Int!
  total: Int!
}

input MembersOfTheManagingCommitteeKapFilter {
  AND: [MembersOfTheManagingCommitteeKapFilter]
  OR: [MembersOfTheManagingCommitteeKapFilter]
  contentfulMetadata: ContentfulMetadataFilter
  mkapDisplayPicture_exists: Boolean
  mkapName: String
  mkapName_contains: String
  mkapName_exists: Boolean
  mkapName_in: [String]
  mkapName_not: String
  mkapName_not_contains: String
  mkapName_not_in: [String]
  mkapPosition: String
  mkapPosition_contains: String
  mkapPosition_exists: Boolean
  mkapPosition_in: [String]
  mkapPosition_not: String
  mkapPosition_not_contains: String
  mkapPosition_not_in: [String]
  sys: SysFilter
}

type MembersOfTheManagingCommitteeKapLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum MembersOfTheManagingCommitteeKapOrder {
  mkapName_ASC
  mkapName_DESC
  mkapPosition_ASC
  mkapPosition_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
Updation of Office Bearers to be done here [See type definition](https://app.contentful.com/spaces/f0p9zov000x1/content_types/officeBearers)
"""
type OfficeBearers implements Entry {
  contentfulMetadata: ContentfulMetadata!
  displayPicture(locale: String, preview: Boolean): Asset
  linkedFrom(allowedLocales: [String]): OfficeBearersLinkingCollections
  officeBearerName(locale: String): String
  officeBearerPosition(locale: String): String
  sys: Sys!
}

type OfficeBearersCollection {
  items: [OfficeBearers]!
  limit: Int!
  skip: Int!
  total: Int!
}

input OfficeBearersFilter {
  AND: [OfficeBearersFilter]
  OR: [OfficeBearersFilter]
  contentfulMetadata: ContentfulMetadataFilter
  displayPicture_exists: Boolean
  officeBearerName: String
  officeBearerName_contains: String
  officeBearerName_exists: Boolean
  officeBearerName_in: [String]
  officeBearerName_not: String
  officeBearerName_not_contains: String
  officeBearerName_not_in: [String]
  officeBearerPosition: String
  officeBearerPosition_contains: String
  officeBearerPosition_exists: Boolean
  officeBearerPosition_in: [String]
  officeBearerPosition_not: String
  officeBearerPosition_not_contains: String
  officeBearerPosition_not_in: [String]
  sys: SysFilter
}

type OfficeBearersLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum OfficeBearersOrder {
  officeBearerName_ASC
  officeBearerName_DESC
  officeBearerPosition_ASC
  officeBearerPosition_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
Event content model type dedicated only towards past events [See type definition](https://app.contentful.com/spaces/f0p9zov000x1/content_types/pastEventContentType)
"""
type PastEventContentType implements Entry {
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): PastEventContentTypeLinkingCollections
  pastEventDate(locale: String): DateTime
  pastEventDescription(locale: String): PastEventContentTypePastEventDescription
  pastEventDisplayPicture(locale: String, preview: Boolean): Asset
  pastEventLocation(locale: String): String
  pastEventName(locale: String): String
  pastEventPicturesCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): AssetCollection
  pastEventSearchTags(locale: String): [String]
  pastEventSlug(locale: String): String
  pastEventType(locale: String): String
  sys: Sys!
}

type PastEventContentTypeCollection {
  items: [PastEventContentType]!
  limit: Int!
  skip: Int!
  total: Int!
}

input PastEventContentTypeFilter {
  AND: [PastEventContentTypeFilter]
  OR: [PastEventContentTypeFilter]
  contentfulMetadata: ContentfulMetadataFilter
  pastEventDate: DateTime
  pastEventDate_exists: Boolean
  pastEventDate_gt: DateTime
  pastEventDate_gte: DateTime
  pastEventDate_in: [DateTime]
  pastEventDate_lt: DateTime
  pastEventDate_lte: DateTime
  pastEventDate_not: DateTime
  pastEventDate_not_in: [DateTime]
  pastEventDescription_contains: String
  pastEventDescription_exists: Boolean
  pastEventDescription_not_contains: String
  pastEventDisplayPicture_exists: Boolean
  pastEventLocation: String
  pastEventLocation_contains: String
  pastEventLocation_exists: Boolean
  pastEventLocation_in: [String]
  pastEventLocation_not: String
  pastEventLocation_not_contains: String
  pastEventLocation_not_in: [String]
  pastEventName: String
  pastEventName_contains: String
  pastEventName_exists: Boolean
  pastEventName_in: [String]
  pastEventName_not: String
  pastEventName_not_contains: String
  pastEventName_not_in: [String]
  pastEventPicturesCollection_exists: Boolean
  pastEventSearchTags_contains_all: [String]
  pastEventSearchTags_contains_none: [String]
  pastEventSearchTags_contains_some: [String]
  pastEventSearchTags_exists: Boolean
  pastEventSlug: String
  pastEventSlug_contains: String
  pastEventSlug_exists: Boolean
  pastEventSlug_in: [String]
  pastEventSlug_not: String
  pastEventSlug_not_contains: String
  pastEventSlug_not_in: [String]
  pastEventType: String
  pastEventType_contains: String
  pastEventType_exists: Boolean
  pastEventType_in: [String]
  pastEventType_not: String
  pastEventType_not_contains: String
  pastEventType_not_in: [String]
  sys: SysFilter
}

type PastEventContentTypeLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum PastEventContentTypeOrder {
  pastEventDate_ASC
  pastEventDate_DESC
  pastEventLocation_ASC
  pastEventLocation_DESC
  pastEventName_ASC
  pastEventName_DESC
  pastEventSlug_ASC
  pastEventSlug_DESC
  pastEventType_ASC
  pastEventType_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type PastEventContentTypePastEventDescription {
  json: JSON!
  links: PastEventContentTypePastEventDescriptionLinks!
}

type PastEventContentTypePastEventDescriptionAssets {
  block: [Asset]!
  hyperlink: [Asset]!
}

type PastEventContentTypePastEventDescriptionEntries {
  block: [Entry]!
  hyperlink: [Entry]!
  inline: [Entry]!
}

type PastEventContentTypePastEventDescriptionLinks {
  assets: PastEventContentTypePastEventDescriptionAssets!
  entries: PastEventContentTypePastEventDescriptionEntries!
  resources: PastEventContentTypePastEventDescriptionResources!
}

type PastEventContentTypePastEventDescriptionResources {
  block: [ResourceLink!]!
  hyperlink: [ResourceLink!]!
  inline: [ResourceLink!]!
}

"""
The 'Quality' type represents quality as whole numeric values between `1` and `100`.
"""
scalar Quality

type Query {
  _node(id: ID!, locale: String, preview: Boolean): _Node
  asset(id: String!, locale: String, preview: Boolean): Asset
  assetCollection(limit: Int = 100, locale: String, order: [AssetOrder], preview: Boolean, skip: Int = 0, where: AssetFilter): AssetCollection
  blogContentType(id: String!, locale: String, preview: Boolean): BlogContentType
  blogContentTypeCollection(limit: Int = 100, locale: String, order: [BlogContentTypeOrder], preview: Boolean, skip: Int = 0, where: BlogContentTypeFilter): BlogContentTypeCollection
  entryCollection(limit: Int = 100, locale: String, order: [EntryOrder], preview: Boolean, skip: Int = 0, where: EntryFilter): EntryCollection
  eventContentType(id: String!, locale: String, preview: Boolean): EventContentType
  eventContentTypeCollection(limit: Int = 100, locale: String, order: [EventContentTypeOrder], preview: Boolean, skip: Int = 0, where: EventContentTypeFilter): EventContentTypeCollection
  eventImageSlider(id: String!, locale: String, preview: Boolean): EventImageSlider
  eventImageSliderCollection(limit: Int = 100, locale: String, order: [EventImageSliderOrder], preview: Boolean, skip: Int = 0, where: EventImageSliderFilter): EventImageSliderCollection
  induShaniWords(id: String!, locale: String, preview: Boolean): InduShaniWords
  induShaniWordsCollection(limit: Int = 100, locale: String, order: [InduShaniWordsOrder], preview: Boolean, skip: Int = 0, where: InduShaniWordsFilter): InduShaniWordsCollection
  membersOfTheManagingCommitteeKap(id: String!, locale: String, preview: Boolean): MembersOfTheManagingCommitteeKap
  membersOfTheManagingCommitteeKapCollection(limit: Int = 100, locale: String, order: [MembersOfTheManagingCommitteeKapOrder], preview: Boolean, skip: Int = 0, where: MembersOfTheManagingCommitteeKapFilter): MembersOfTheManagingCommitteeKapCollection
  officeBearers(id: String!, locale: String, preview: Boolean): OfficeBearers
  officeBearersCollection(limit: Int = 100, locale: String, order: [OfficeBearersOrder], preview: Boolean, skip: Int = 0, where: OfficeBearersFilter): OfficeBearersCollection
  pastEventContentType(id: String!, locale: String, preview: Boolean): PastEventContentType
  pastEventContentTypeCollection(limit: Int = 100, locale: String, order: [PastEventContentTypeOrder], preview: Boolean, skip: Int = 0, where: PastEventContentTypeFilter): PastEventContentTypeCollection
  termsAndCondition(id: String!, locale: String, preview: Boolean): TermsAndCondition
  termsAndConditionCollection(limit: Int = 100, locale: String, order: [TermsAndConditionOrder], preview: Boolean, skip: Int = 0, where: TermsAndConditionFilter): TermsAndConditionCollection
}

type ResourceLink {
  sys: ResourceSys!
}

type ResourceSys {
  linkType: String!
  type: String!
  urn: String!
}

type Sys {
  environmentId: String!
  firstPublishedAt: DateTime
  id: String!
  publishedAt: DateTime
  publishedVersion: Int
  spaceId: String!
}

input SysFilter {
  firstPublishedAt: DateTime
  firstPublishedAt_exists: Boolean
  firstPublishedAt_gt: DateTime
  firstPublishedAt_gte: DateTime
  firstPublishedAt_in: [DateTime]
  firstPublishedAt_lt: DateTime
  firstPublishedAt_lte: DateTime
  firstPublishedAt_not: DateTime
  firstPublishedAt_not_in: [DateTime]
  id: String
  id_contains: String
  id_exists: Boolean
  id_in: [String]
  id_not: String
  id_not_contains: String
  id_not_in: [String]
  publishedAt: DateTime
  publishedAt_exists: Boolean
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  publishedAt_in: [DateTime]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_not: DateTime
  publishedAt_not_in: [DateTime]
  publishedVersion: Float
  publishedVersion_exists: Boolean
  publishedVersion_gt: Float
  publishedVersion_gte: Float
  publishedVersion_in: [Float]
  publishedVersion_lt: Float
  publishedVersion_lte: Float
  publishedVersion_not: Float
  publishedVersion_not_in: [Float]
}

"""
T&C and Privacy Policy for the site
 [See type definition](https://app.contentful.com/spaces/f0p9zov000x1/content_types/termsAndCondition)
"""
type TermsAndCondition implements Entry {
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): TermsAndConditionLinkingCollections
  privacyPolicyContent(locale: String): TermsAndConditionPrivacyPolicyContent
  sys: Sys!
  tCContent(locale: String): TermsAndConditionTCContent
}

type TermsAndConditionCollection {
  items: [TermsAndCondition]!
  limit: Int!
  skip: Int!
  total: Int!
}

input TermsAndConditionFilter {
  AND: [TermsAndConditionFilter]
  OR: [TermsAndConditionFilter]
  contentfulMetadata: ContentfulMetadataFilter
  privacyPolicyContent_contains: String
  privacyPolicyContent_exists: Boolean
  privacyPolicyContent_not_contains: String
  sys: SysFilter
  tCContent_contains: String
  tCContent_exists: Boolean
  tCContent_not_contains: String
}

type TermsAndConditionLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum TermsAndConditionOrder {
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type TermsAndConditionPrivacyPolicyContent {
  json: JSON!
  links: TermsAndConditionPrivacyPolicyContentLinks!
}

type TermsAndConditionPrivacyPolicyContentAssets {
  block: [Asset]!
  hyperlink: [Asset]!
}

type TermsAndConditionPrivacyPolicyContentEntries {
  block: [Entry]!
  hyperlink: [Entry]!
  inline: [Entry]!
}

type TermsAndConditionPrivacyPolicyContentLinks {
  assets: TermsAndConditionPrivacyPolicyContentAssets!
  entries: TermsAndConditionPrivacyPolicyContentEntries!
  resources: TermsAndConditionPrivacyPolicyContentResources!
}

type TermsAndConditionPrivacyPolicyContentResources {
  block: [ResourceLink!]!
  hyperlink: [ResourceLink!]!
  inline: [ResourceLink!]!
}

type TermsAndConditionTCContent {
  json: JSON!
  links: TermsAndConditionTCContentLinks!
}

type TermsAndConditionTCContentAssets {
  block: [Asset]!
  hyperlink: [Asset]!
}

type TermsAndConditionTCContentEntries {
  block: [Entry]!
  hyperlink: [Entry]!
  inline: [Entry]!
}

type TermsAndConditionTCContentLinks {
  assets: TermsAndConditionTCContentAssets!
  entries: TermsAndConditionTCContentEntries!
  resources: TermsAndConditionTCContentResources!
}

type TermsAndConditionTCContentResources {
  block: [ResourceLink!]!
  hyperlink: [ResourceLink!]!
  inline: [ResourceLink!]!
}

interface _Node {
  _id: ID!
}